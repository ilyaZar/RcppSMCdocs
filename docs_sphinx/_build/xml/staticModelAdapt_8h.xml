<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="staticModelAdapt_8h" kind="file" language="C++">
    <compoundname>staticModelAdapt.h</compoundname>
    <includes refid="population_8h" local="no">population.h</includes>
    <includedby refid="sampler_8h" local="yes">/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/sampler.h</includedby>
    <includedby refid="RcppSMC_8h" local="no">/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/RcppSMC.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/staticModelAdapt.h</label>
        <link refid="staticModelAdapt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="4">
        <label>float.h</label>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>RcppArmadillo.h</label>
      </node>
      <node id="2">
        <label>population.h</label>
        <link refid="population_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/staticModelAdapt.h</label>
        <link refid="staticModelAdapt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/conditionalSampler.h</label>
        <link refid="conditionalSampler_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/pflineart.h</label>
        <link refid="pflineart_8h"/>
      </node>
      <node id="7">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/LinReg_LA.h</label>
        <link refid="LinReg__LA_8h"/>
      </node>
      <node id="6">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/cSMCexamples.h</label>
        <link refid="cSMCexamples_8h"/>
      </node>
      <node id="11">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/pfnonlinbs.h</label>
        <link refid="pfnonlinbs_8h"/>
      </node>
      <node id="4">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/blockpfgaussianopt.h</label>
        <link refid="blockpfgaussianopt_8h"/>
      </node>
      <node id="5">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/RcppSMC.h</label>
        <link refid="RcppSMC_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/nonLinPMMH.h</label>
        <link refid="nonLinPMMH_8h"/>
      </node>
      <node id="8">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/LinReg_LA_adapt.h</label>
        <link refid="LinReg__LA__adapt_8h"/>
      </node>
      <node id="2">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/sampler.h</label>
        <link refid="sampler_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/smctc.h</label>
        <link refid="smctc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classsmc_1_1staticModelAdapt" prot="public">smc::staticModelAdapt</innerclass>
    <innernamespace refid="namespacesmc">smc</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="staticModelAdapt_8h_1a8d51011a2c57c6b3012142d816fa59d2" prot="public" static="no">
        <name>__SMC_STATICMODELADAPT_HH</name>
        <initializer>1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/staticModelAdapt.h" line="31" column="9" bodyfile="/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/staticModelAdapt.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>-*-<sp/>mode:<sp/>C++;<sp/>c-indent-level:<sp/>4;<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>staticModelAdapt.h:<sp/>A<sp/>class<sp/>containing<sp/>parameters<sp/>and<sp/>functions<sp/>to<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>parameters<sp/>in<sp/>the<sp/>context<sp/>of<sp/>static<sp/>Bayesian<sp/>models.<sp/>The<sp/>methods<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>estimate<sp/>the<sp/>empirical<sp/>covariance<sp/>and<sp/>its<sp/>Cholesky<sp/>decomposition<sp/>are<sp/>applicable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>applications<sp/>where<sp/>the<sp/>particle<sp/>values<sp/>are<sp/>a<sp/>vector<sp/>of<sp/>doubles.<sp/>The<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>compute<sp/>the<sp/>next<sp/>&apos;temperature&apos;<sp/>are<sp/>relevant<sp/>to<sp/>likelihood<sp/>annealing<sp/>SMC<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>power<sp/>posteriors<sp/>are<sp/>defined<sp/>by<sp/>P_t(theta|y)<sp/>\propto<sp/>P(y|theta)^\gamma_t<sp/>P(theta).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>y<sp/>is<sp/>observed<sp/>data,<sp/>theta<sp/>denotes<sp/>the<sp/>parameters<sp/>of<sp/>the<sp/>model<sp/>and<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>denotes<sp/>the<sp/>&apos;temperatures&apos;<sp/>which<sp/>start<sp/>at<sp/>0<sp/>(the<sp/>prior)<sp/>and<sp/>finish<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(the<sp/>posterior).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2017<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dirk<sp/>Eddelbuettel,<sp/>Adam<sp/>Johansen<sp/>and<sp/>Leah<sp/>South</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>RcppSMC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RcppSMC<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RcppSMC<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>RcppSMC.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SMC_STATICMODELADAPT_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="staticModelAdapt_8h_1a8d51011a2c57c6b3012142d816fa59d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SMC_STATICMODELADAPT_HH<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="population_8h" kindref="compound">population.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesmc" kindref="compound">smc</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classsmc_1_1staticModelAdapt" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsmc_1_1staticModelAdapt" kindref="compound">staticModelAdapt</ref>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41" refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>;</highlight></codeline>
<codeline lineno="43" refid="classsmc_1_1staticModelAdapt_1a8cb8c1dedfccc7db7ae6d5600cf4ae39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat<sp/><ref refid="classsmc_1_1staticModelAdapt_1a8cb8c1dedfccc7db7ae6d5600cf4ae39" kindref="member">empCov</ref>;</highlight></codeline>
<codeline lineno="45" refid="classsmc_1_1staticModelAdapt_1a925d2a0b86f3b15a1ec1321b8b8ebb75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat<sp/><ref refid="classsmc_1_1staticModelAdapt_1a925d2a0b86f3b15a1ec1321b8b8ebb75" kindref="member">cholCov</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" kindref="member">CESSdiff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>loglike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempDiff,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredCESS);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a85968708aebf062be993c4a7037417f9" kindref="member">bisection</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>curr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>loglike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredCESS,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53" refid="classsmc_1_1staticModelAdapt_1a984b8dc9035879b20939de2c217d19b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsmc_1_1staticModelAdapt_1a984b8dc9035879b20939de2c217d19b6" kindref="member">~staticModelAdapt</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="55" refid="classsmc_1_1staticModelAdapt_1a301341fa94dadceecca0337b399f0f9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsmc_1_1staticModelAdapt_1a301341fa94dadceecca0337b399f0f9c" kindref="member">staticModelAdapt</ref>()<sp/>{<ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>.push_back(0.0);}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a5a865ce472d42b010cdf869debb0deaa" kindref="member">ChooseTemp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>loglike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredCESS,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.01);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a9fbc8a91e10bfc6a2df267c1bad5d02e" kindref="member">calcEmpCov</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::mat<sp/>&amp;<sp/>theta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a5a37d9e6bf0c01fabfd01d5fe15ea441" kindref="member">calcCholCov</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::mat<sp/>&amp;<sp/>theta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>logweight);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ad12fb34bb4cd11ac4223b09eab265e67" kindref="member">calcMcmcRepeats</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>acceptProb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredAcceptProb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialN,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxReps);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classsmc_1_1staticModelAdapt_1a269caa0da7e3ffc38aeb84b3dfbf4b73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a269caa0da7e3ffc38aeb84b3dfbf4b73" kindref="member">GetTemp</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>[t];}</highlight></codeline>
<codeline lineno="69" refid="classsmc_1_1staticModelAdapt_1a8737306c979de406ce6a3af3e8bf7119" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a8737306c979de406ce6a3af3e8bf7119" kindref="member">GetTempCurr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>.back();}</highlight></codeline>
<codeline lineno="71" refid="classsmc_1_1staticModelAdapt_1ab2a71f9ff8be1e99375b849343786a4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ab2a71f9ff8be1e99375b849343786a4e" kindref="member">GetTempPrevious</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>.rbegin()[1];}</highlight></codeline>
<codeline lineno="73" refid="classsmc_1_1staticModelAdapt_1a007292a8429016519ae77181c2ce6178" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classsmc_1_1staticModelAdapt_1a007292a8429016519ae77181c2ce6178" kindref="member">GetTemps</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>;}</highlight></codeline>
<codeline lineno="75" refid="classsmc_1_1staticModelAdapt_1af0020436521cead17a9c8e500e5788f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat<sp/><ref refid="classsmc_1_1staticModelAdapt_1af0020436521cead17a9c8e500e5788f8" kindref="member">GetCholCov</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a925d2a0b86f3b15a1ec1321b8b8ebb75" kindref="member">cholCov</ref>;}</highlight></codeline>
<codeline lineno="77" refid="classsmc_1_1staticModelAdapt_1ab669394ae8f88004c37a58afef1fe9ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat<sp/><ref refid="classsmc_1_1staticModelAdapt_1ab669394ae8f88004c37a58afef1fe9ca" kindref="member">GetEmpCov</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a8cb8c1dedfccc7db7ae6d5600cf4ae39" kindref="member">empCov</ref>;}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" kindref="member">staticModelAdapt::CESSdiff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>loglike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempDiff,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredCESS){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logsum1<sp/>=<sp/><ref refid="namespacesmc_1aaa30e89b2e4c9913d9a8b9b79d482308" kindref="member">stableLogSumWeights</ref>(logweight<sp/>+<sp/>tempDiff*loglike);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logsum2<sp/>=<sp/><ref refid="namespacesmc_1aaa30e89b2e4c9913d9a8b9b79d482308" kindref="member">stableLogSumWeights</ref>(logweight<sp/>+<sp/>2*tempDiff*loglike);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp(log(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(logweight.n_rows))<sp/>+<sp/>2*logsum1<sp/>-<sp/>logsum2)<sp/>-<sp/>desiredCESS;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89" refid="classsmc_1_1staticModelAdapt_1a85968708aebf062be993c4a7037417f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a85968708aebf062be993c4a7037417f9" kindref="member">staticModelAdapt::bisection</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>curr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>loglike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredCESS,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>curr;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f_a<sp/>=<sp/><ref refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" kindref="member">CESSdiff</ref>(logweight,loglike,a-curr,desiredCESS);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f_b<sp/>=<sp/><ref refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" kindref="member">CESSdiff</ref>(logweight,loglike,b-curr,desiredCESS);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f_a*f_b&gt;0){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rcpp::stop(</highlight><highlight class="stringliteral">&quot;Bisection<sp/>method<sp/>to<sp/>choose<sp/>the<sp/>next<sp/>temperature<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m,<sp/>f_m,<sp/>err;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>(a+b)/2.0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_m<sp/>=<sp/><ref refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" kindref="member">CESSdiff</ref>(logweight,loglike,m-curr,desiredCESS);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>10.0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(err<sp/>&gt;<sp/>epsilon){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f_m&lt;0.0){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_b<sp/>=<sp/>f_m;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_a<sp/>=<sp/>f_m;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>(a+b)/2.0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_m<sp/>=<sp/><ref refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" kindref="member">CESSdiff</ref>(logweight,loglike,m-curr,desiredCESS);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>std::abs(f_m);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classsmc_1_1staticModelAdapt_1a5a865ce472d42b010cdf869debb0deaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a5a865ce472d42b010cdf869debb0deaa" kindref="member">staticModelAdapt::ChooseTemp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>loglike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredCESS,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp_curr<sp/>=<sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>.back();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsmc_1_1staticModelAdapt_1ada6b5ca553373baba9069a64f45e86c5" kindref="member">CESSdiff</ref>(logweight,loglike,1.0-temp_curr,desiredCESS)&gt;=-epsilon){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>.push_back(1.0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsmc_1_1staticModelAdapt_1ab98899cba54c9d80480e607f3c9d979f" kindref="member">temp</ref>.push_back(<ref refid="classsmc_1_1staticModelAdapt_1a85968708aebf062be993c4a7037417f9" kindref="member">bisection</ref>(temp_curr,<sp/>logweight,<sp/>loglike,<sp/>desiredCESS,<sp/>epsilon));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classsmc_1_1staticModelAdapt_1a9fbc8a91e10bfc6a2df267c1bad5d02e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a9fbc8a91e10bfc6a2df267c1bad5d02e" kindref="member">staticModelAdapt::calcEmpCov</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::mat<sp/>&amp;<sp/>theta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>&amp;<sp/>logweight){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>logweight.n_rows;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>normWeights<sp/>=<sp/>exp(logweight<sp/>-<sp/><ref refid="namespacesmc_1aaa30e89b2e4c9913d9a8b9b79d482308" kindref="member">stableLogSumWeights</ref>(logweight));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat<sp/>diff<sp/>=<sp/>theta<sp/>-<sp/>arma::ones(N,1)*arma::mean(theta,0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsmc_1_1staticModelAdapt_1a8cb8c1dedfccc7db7ae6d5600cf4ae39" kindref="member">empCov</ref><sp/>=<sp/>diff.t()*diagmat(normWeights)*diff;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classsmc_1_1staticModelAdapt_1a5a37d9e6bf0c01fabfd01d5fe15ea441" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1a5a37d9e6bf0c01fabfd01d5fe15ea441" kindref="member">staticModelAdapt::calcCholCov</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::mat<sp/>&amp;<sp/>theta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>logweight){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsmc_1_1staticModelAdapt_1a9fbc8a91e10bfc6a2df267c1bad5d02e" kindref="member">calcEmpCov</ref>(theta,logweight);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsmc_1_1staticModelAdapt_1a925d2a0b86f3b15a1ec1321b8b8ebb75" kindref="member">cholCov</ref><sp/>=<sp/>arma::chol(<ref refid="classsmc_1_1staticModelAdapt_1a8cb8c1dedfccc7db7ae6d5600cf4ae39" kindref="member">empCov</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classsmc_1_1staticModelAdapt_1ad12fb34bb4cd11ac4223b09eab265e67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsmc_1_1staticModelAdapt_1ad12fb34bb4cd11ac4223b09eab265e67" kindref="member">staticModelAdapt::calcMcmcRepeats</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>acceptProb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredAcceptProb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialN,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxReps){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acceptProb<sp/>+<sp/>1.0<sp/>&lt;=<sp/>1e-9){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initialN;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acceptProb<sp/>-<sp/>1.0<sp/>&gt;=<sp/>-1e-9){</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acceptProb<sp/>&lt;=<sp/>1e-9){</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxReps;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::min(maxReps,</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::ceil(log(1.0-desiredAcceptProb)/log(1.0-acceptProb))));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/iz/Dropbox/projects/rcppsmc/RcppSMCdocumentation/include/staticModelAdapt.h"/>
  </compounddef>
</doxygen>
